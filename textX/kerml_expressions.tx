/* EXPRESSIONS */
/* Operator Expressions */
OwnedExpressionMember /*returns  SysML::FeatureMembership*/:
	ownedRelatedElement += OwnedExpression // ownedMemberFeature = OwnedExpression
;

OwnedExpression /*returns  SysML::Expression*/:
	 ConditionalExpression
;

// Conditional Test Expressions

ConditionalExpression /*returns  SysML::Expression*/:
	  NullCoalescingExpression ( {SysML::OperatorExpression.operand += current}
		  operator = ConditionalOperator operand += OwnedExpression ':' operand += ConditionalExpression
	  )?
	| {SysML::OperatorExpression} 'if' operand += NullCoalescingExpression
		  operator = ConditionalOperator operand += OwnedExpression 'else' operand += ConditionalExpression
;

ConditionalOperator:
	'?'
;

// Null Coalescing Expressions

NullCoalescingExpression /*returns  SysML::Expression*/:
	ImpliesExpression ( {SysML::OperatorExpression.operand += current}
		operator = NullCoalescingOperator operand += ImpliesExpression )*
;

NullCoalescingOperator:
	'??'
;

// Logical Expressions

ImpliesExpression /*returns  SysML::Expression*/:
	OrExpression ( {SysML::OperatorExpression.operand += current}
		operator = ImpliesOperator operand += OrExpression )*
;

ImpliesOperator:
	'=>' | 'implies'
;

OrExpression /*returns  SysML::Expression*/:
	XorExpression ( {SysML::OperatorExpression.operand += current}
		operator = OrOperator operand += XorExpression )*
;

OrOperator:
	'|' | '||' | 'or'
;

XorExpression /*returns  SysML::Expression*/:
	AndExpression ( {SysML::OperatorExpression.operand += current}
		operator = XorOperator operand += AndExpression )*
;

XorOperator:
	'^^' | 'xor'
;

AndExpression /*returns  SysML::Expression*/:
	EqualityExpression ( {SysML::OperatorExpression.operand += current}
		operator = AndOperator operand += EqualityExpression )*
;

AndOperator:
	'&' | '&&' | 'and'
;

// Equality Expressions

EqualityExpression /*returns  SysML::Expression*/:
	ClassificationExpression ( {SysML::OperatorExpression.operand += current}
		operator = EqualityOperator operand += ClassificationExpression )*

;

EqualityOperator:
	'==' | '!='
;

// Classification Expressions

ClassificationExpression /*returns  SysML::Expression*/:
	  RelationalExpression ( {SysML::OperatorExpression.operand += current}
		operator = ClassificationOperator ownedRelationship += TypeReferenceMember )?
	| {SysML::OperatorExpression} operand += SelfReferenceExpression
		operator = ClassificationOperator ownedRelationship += TypeReferenceMember
;

ClassificationOperator:
	'hastype' | 'istype' | '@' | 'as'
;

TypeReferenceMember /*returns  SysML::FeatureMembership*/:
	ownedRelatedElement += TypeReference
	// ownedMemberFeature = TypeReference
;

TypeReference /*returns  SysML::Feature*/:
	ownedRelationship += ReferenceTyping
;

ReferenceTyping /*returns  SysML::FeatureTyping*/:
	  type = [SysML::Type | QualifiedName]
;

SelfReferenceExpression /*returns  SysML::FeatureReferenceExpression*/:
	ownedRelationship += SelfReferenceMember
;

SelfReferenceMember /*returns  SysML::ReturnParameterMembership*/:
	ownedRelatedElement += EmptyFeature // ownedMemberFeature = EmptyFeature
;

EmptyFeature /*returns  SysML::Feature*/:
	{SysML::Feature}
;

// Relational Expressions

RelationalExpression /*returns  SysML::Expression*/:
	RangeExpression ( {SysML::OperatorExpression.operand += current}
		operator = RelationalOperator operand += RangeExpression )*
;

RelationalOperator:
	'<' | '>' | '<=' | '>='
;

// Range Expressions

RangeExpression /*returns  SysML::Expression*/:
	AdditiveExpression ( {SysML::OperatorExpression.operand += current}
		operator = '..' operand += AdditiveExpression )?
;

// Arithmetic Expressions

AdditiveExpression /*returns  SysML::Expression*/:
	MultiplicativeExpression ( {SysML::OperatorExpression.operand += current}
		operator = AdditiveOperator operand += MultiplicativeExpression )*
;

AdditiveOperator:
	'+' | '-'
;

MultiplicativeExpression /*returns  SysML::Expression*/:
	ExponentiationExpression ( {SysML::OperatorExpression.operand += current}
		operator = MultiplicativeOperator operand += ExponentiationExpression )*
;

MultiplicativeOperator:
	'*' | '/' | '%'
;

ExponentiationExpression /*returns  SysML::Expression*/:
	UnaryExpression ( {SysML::OperatorExpression.operand += current}
		operator = ExponentiationOperator operand += UnaryExpression )*
;

ExponentiationOperator:
	'**' | '^'
;

// Unary Expressions

UnaryExpression /*returns  SysML::Expression*/:
	  {SysML::OperatorExpression} operator = UnaryOperator operand += ExtentExpression
	| ExtentExpression
;

UnaryOperator:
	'+' | '-' | '!' | '~' | 'not'
;

// Extent Expressions

ExtentExpression /*returns  SysML::Expression*/:
	  {SysML::OperatorExpression} operator = 'all' ownedRelationship += TypeReferenceMember
	| PrimaryExpression
;

/* Primary Expressions */

PrimaryExpression /*returns  SysML::Expression*/:
	BaseExpression
	( {SysML::PathStepExpression.operand += current} '.'
	  operand += FeatureChainExpression
	)?
	( ( {SysML::OperatorExpression.operand += current}
	    operator = '[' operand += SequenceExpression ']'
	  | {SysML::OperatorExpression.operand += current} '->'
	    ownedRelationship += ReferenceTyping
	    ( ownedRelationship += ExpressionBodyMember
	    | ownedRelationship += FunctionReferenceMember
	    | ArgumentList
	    )
	  | {SysML::PathSelectExpression.operand += current} '.'
	    ownedRelationship += ExpressionBodyMember
	  )
	  ( {SysML::PathStepExpression.operand += current} '.'
	    operand += FeatureChainExpression
	  )?
	)*
;

ExpressionBodyMember /*returns  SysML::FeatureMembership*/:
	ownedRelatedElement += ExpressionBody // ownedMemberFeature = BodyExpression
;

FunctionReferenceMember /*returns  SysML::FeatureMembership*/:
	ownedRelatedElement += FunctionReference // ownedMemberFeature = FunctionReference
;

FunctionReference /*returns  SysML::Expression*/:
	ownedRelationship += ReferenceTyping
;

FeatureChainExpression /*returns  SysML::FeatureReferenceExpression*/:
	ownedRelationship += FeatureChainMember
;

FeatureChainMember /*returns  SysML::Membership*/:
	  memberElement = [SysML::Feature | QualifiedName]
	| ownedRelatedElement += FeatureChain
;

/* Base Expressions */

BaseExpression /*returns  SysML::Expression*/:
	  NullExpression
	| LiteralExpression
	| FeatureReferenceExpression
	| InvocationExpression
	| ExpressionBody
	| '(' SequenceExpression ')'
;

// Expression Bodies

// This default production is overridden in the KerML and SysML grammars.
ExpressionBody /*returns  SysML::Expression*/:
	'{' ( ownedRelationship += BodyParameterMember ';' )*
	    ownedRelationship += ResultExpressionMember '}'
;

ResultExpressionMember /*returns  SysML::ResultExpressionMembership*/:
	ownedRelatedElement += OwnedExpression // ownedResultExpression = OwnedExpression
;

BodyParameterMember /*returns  SysML::ParameterMembership*/:
	'in' memberName = Name ownedRelatedElement += BodyParameter // ownedMemberParameter = BodyParameter
;

BodyParameter /*returns  SysML::Feature*/:
	{SysML::Feature}
;

// Sequence Expressions

SequenceExpression /*returns  SysML::Expression*/:
	OwnedExpression
	( ','
	| {SysML::OperatorExpression.operand += current} operator = ','
	  operand += SequenceExpression
	)?
;

// Feature Reference Expressions

FeatureReferenceExpression /*returns  SysML::FeatureReferenceExpression*/:
	ownedRelationship += FeatureReferenceMember
;

FeatureReferenceMember /*returns  SysML::Membership*/:
	memberElement = [SysML::Feature | QualifiedName]
;

// Invocation Expressions

InvocationExpression /*returns  SysML::InvocationExpression*/:
	ownedRelationship += OwnedFeatureTyping ArgumentList
;

OwnedFeatureTyping /*returns  SysML::FeatureTyping*/:
	  type = [SysML::Type | QualifiedName]
	| ownedRelatedElement += FeatureChain
;

FeatureChain /*returns  SysML::Feature*/:
	ownedRelationship += OwnedFeatureChaining
	( '.' ownedRelationship += OwnedFeatureChaining )+
;

OwnedFeatureChaining /*returns  SysML::FeatureChaining*/:
	chainingFeature = [SysML::Feature | QualifiedName]

;

fragment ArgumentList /*returns  SysML::Expression*/:
	'(' ( PositionalArgumentList | NamedArgumentList )? ')'
;

fragment PositionalArgumentList /*returns  SysML::Expression*/:
	ownedRelationship += OwnedExpressionMember
	( ',' ownedRelationship += OwnedExpressionMember )*
;

fragment NamedArgumentList /*returns  SysML::Expression*/:
	ownedRelationship += NamedExpressionMember
	( ',' ownedRelationship += NamedExpressionMember )*
;

NamedExpressionMember /*returns  SysML::FeatureMembership*/:
	memberName = Name '=' ownedRelatedElement += OwnedExpression // ownedMemberFeature = OwnedExpression
;

// Null Expressions

NullExpression /*returns  SysML::NullExpression*/:
	{SysML::NullExpression} ( 'null' | '(' ')' )
;

/* Literal Expressions */

LiteralExpression /*returns  SysML::LiteralExpression*/:
	  LiteralBoolean
	| LiteralString
	| LiteralInteger
	| LiteralReal
	| LiteralInfinity
;

LiteralBoolean /*returns  SysML::LiteralBoolean*/:
	value = BooleanValue
;

BooleanValue /*returns  Ecore::EBoolean*/:
	'true' | 'false'
;

LiteralString /*returns  SysML::LiteralString*/:
	value = STRING_VALUE
;

LiteralInteger /*returns  SysML::LiteralInteger*/:
	value = DECIMAL_VALUE
;

LiteralReal /*returns  SysML::LiteralRational*/:
	value = RealValue
;

RealValue /*returns  Ecore::EDouble*/:
	DECIMAL_VALUE? '.' ( DECIMAL_VALUE | EXP_VALUE ) | EXP_VALUE
;

LiteralInfinity /*returns  SysML::LiteralInfinity*/:
	{SysML::LiteralInfinity} '*'
;

/* NAMES */

Name:
	ID | UNRESTRICTED_NAME
;

Qualification:
	( Name '::' )+
;

QualifiedName:
	Qualification? Name
;

/* TERMINALS */

DECIMAL_VALUE /*returns  Ecore::EInt*/:
	'0'..'9' ('0'..'9')*
	;

EXP_VALUE:
	DECIMAL_VALUE ('e' | 'E') ('+' | '-')? DECIMAL_VALUE
	;

ID:
	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*
	;

UNRESTRICTED_NAME /*returns  Ecore::EString*/:
	'\'' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '\''))* '\''
	;

STRING_VALUE /*returns  Ecore::EString*/:
	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"'
	;

REGULAR_COMMENT:
	'/*' !('*') ->'*/'
	;

DOCUMENTATION_COMMENT:
	'/**'->'*/'
	;

ML_NOTE:
	'//*'->'*/'
;

SL_NOTE:
	'//' (!('\n' | '\r') !('\n' | '\r')*)? ('\r'? '\n')?
;

WS:
	(' ' | '\t' | '\r' | '\n')+;