/* Elements */
RootNamespace:
    'namespace' ('<' humanId=Name '>')? ( name=Name )?
    (';' | '{'
      ( ownedRelationship += OwnedDocumentation
      | ownedRelationship += NamespaceMember
      | ownedRelationship += AliasMember
      | ownedRelationship += Import
      )*
    '}');

Element:
    'element' (('<' humanId=Name '>' name=Name ) | ( '<' name=Name '>' ) | name=Name)
    (';' | '{'
        (   ownedRelationship += OwnedRelationship
            | ownedRelationship += OwnedDocumentation
            | ownedRelationship += OwnedTextualRepresentationAnnotation
        )*
    '}')
;

/* =============================================================== */
/* Relationships */
Relationship:
    'relationship' (('<' humanId=Name '>' name=Name ) | ( '<' name=Name '>' ) | name=Name)?
        ('from' source+=[Element|QualifiedName][','])?
        ('to' target+=[Element|QualifiedName][','])?
    (';' | '{'
        ownedRelatedElement+=RelationshipOwnedElement
    '}')
;

OwnedRelationship:
    'relationship' ('<' name=Name '>')? ('to' target+=[Element|QualifiedName][','])?
    (';' | '{'
        ownedRelatedElement+=RelationshipOwnedElement
    '}')
;

RelationshipOwnedElement:
      Element | Relationship
;

/* =============================================================== */
/* Namespace */
Namespace:
    'namespace' (('<' humanId=Name '>' name=Name ) | ( '<' name=Name '>' ) | name=Name)
    (';' | '{'
      ( ownedRelationship += OwnedDocumentation
      | ownedRelationship += NamespaceMember
      | ownedRelationship += AliasMember
      | ownedRelationship += Import
      )*
    '}')
;

MemberPrefix:
    ( ownedRelationship += PrefixDocumentation )*
    ( visibility = VisibilityIndicator )?
;
NamespaceMember:
      NonFeatureMember
    | FeatureNamespaceMember
    | ChainFeatureMember
;
NonFeatureMember:
    MemberPrefix
    ownedMemberElement=NonFeatureElement
;
FeatureNamespaceMember:
    MemberPrefix
    ownedMemberElement=FeatureElement
;
ChainFeatureMember:
    MemberPrefix
    'feature'? ( name=Name )? 'is'
    ownedMemberElement = 'FeatureChain'
;
AliasMember:
    MemberPrefix
    'alias' name=Name 'for'
    memberElement=[Element|QualifiedName] ';'
;
Import:
    ( ownedRelationship += PrefixDocumentation )*
    ( visibility = VisibilityIndicator )?
    'import' ( isImportAll ?= 'all' )?
        ( ImportedNamespace
        | ImportedFilterPackage ) ';'
;
ImportedNamespace:
    ( importedNamespace = [Namespace|QualifiedName] '::' )?
    ( importedName=Name | '*' )
    ( '::' isRecursive ?= '**' )?
;
ImportedFilterPackage:
    ownedRelatedElement += FilterPackage
;
FilterPackage:
    ownedRelationship += FilterPackageImport
    ( ownedRelationship += FilterPackageMember )+
;
FilterPackageImport:
    ImportedNamespace
;
FilterPackageMember:
    '[' condition=TEMP_RULE /*OwnedExpression*/ ']'
//    visibility='private'
;
VisibilityIndicator :
//    visibilityKind=Visibility
    'public' | 'private' | 'protected'
;

//Visibility:
//    'public' | 'private' | 'protected'
//;

NonFeatureElement:
    Element
    | Relationship
    | ModelComment
    | TextualRepresentation
//    | 'AnnotatingFeature'
    | Namespace
//    | 'Type'
//    | 'Classifier'
//    | 'DataType'
//    | 'Class'
//    | 'Structure'
//    | 'Association'
//    | 'AssociationStructure'
//    | 'Interaction'
//    | 'Behavior'
//    | 'Function'
//    | 'Predicate'
//    | 'Multiplicity'
    | Package
//    | 'Specialization'
//    | 'Conjugation'
//    | 'Subclassification'
//    | 'Disjoining'
//    | 'FeatureTyping'
//    | 'Subsetting'
//    | 'Redefinition'
//    | 'TypeFeaturing'
;
FeatureElement:
      'Feature'
//    | 'Step'
//    | 'Expression'
//    | 'BooleanExpression'
//    | 'Invariant'
//    | 'Connector'
//    | 'BindingConnector'
//    | 'Succession'
//    | 'ItemFlow'
//    | 'SuccessionItemFlow'
;

/* =============================================================== */
/* Comments */
ModelComment:
	( 'comment' (('<' humanId=Name '>' name=Name ) | ( '<' name=Name '>' ) | name=Name)
	  'about' ownedRelationship += Annotation
      //{ ownedRelationship += annotation }
      ownedRelationship += [Annotation|QualifiedName]
	  ( ',' ownedRelationship += Annotation )*
	  | ( 'comment' (('<' humanId=Name '>' name=Name ) | ( '<' name=Name '>' ) | name=Name) )?
	  ownedRelationship += ElementAnnotation
      //{ ownedRelationship += annotation }
      ownedRelationship += [Annotation|QualifiedName]
	)
	body = /(?ms)\/\*(.*?)\*\//
;

Annotation:
	annotatedElement = [QualifiedName]
;

ElementAnnotation:
//    type=[Annotation]
    annotatedElement = [Element|QualifiedName]
;

/* =============================================================== */
/* DOCUMENTATION */
OwnedDocumentation:
    documentingComment=DocumentationComment
;

DocumentationComment:
    'doc' ('<' name = Name '>' )? body=/(?ms)\/\*(.*?)\*\//
//    'doc' ('<' humanId = Name '>' )? body=/(?ms)\/\*(.*?)\*\//
;

PrefixDocumentation:
	documentingComment=PrefixDocumentationComment
;

PrefixDocumentationComment:
	( 'doc' ( '<' name = Name '>' )? )? body=/(?ms)\/\*\*(.*?)\*\//
;

/* =============================================================== */
/* Textual Representation */
OwnedTextualRepresentationAnnotation:
    ownedRelatedElement += OwnedTextualRepresentation
;

OwnedTextualRepresentation:
    ( 'rep' ( humanId=Name )? )?
    'language' QuotedID body=REGULAR_COMMENT
;

TextualRepresentation:
    (   'rep' (('<' humanId=Name '>')? ( name=Name )?) 'about' annotation+=Annotation
    | ( 'rep' (('<' humanId=Name '>')? ( name=Name )?) )? ElementAnnotation
    )
    'language' name=QuotedID body=REGULAR_COMMENT
;

FullyQualifiedID[noskipws]:
    /\s*/-
    QuotedID+['.']
    /\s*/-
;
QuotedID:
    '"'?- ID '"'?-
;

/* =============================================================== */
/* CORE LAYER RULES */
/* =============================================================== */

/* =============================================================== */
/* TYPES */
//Type:
//    ( isAbstract ?= 'abstract' )? 'type'
//    TypeDeclaration TypeBody
//    ;
//TypeDeclaration:
//    ( isSufficient ?= 'all' )?  ('<' humanId=Name '>')? ( name=Name )?
////    ( ownedRelationship += OwnedMultiplicity )?
//    ( SpecializationPart | ConjugationPart )+
//    DisjoiningPart?
//    ;
//SpecializationPart:
//    SPECIALIZES ownedRelationship += OwnedSpecialization
//    ( ',' ownedRelationship += OwnedSpecialization )*
//    ;
//
//ConjugationPart:
//    CONJUGATES ownedRelationship += TEMP_RULE // OwnedConjugation
//    ;

//DisjoiningPart:
//    'disjoint' 'from' ownedRelationship += TEMP_RULE // OwnedDisjoining
//    ( ',' ownedRelationship += TEMP_RULE /*OwnedDisjoining*/ )*
//    ;

//TypeBody:
//    ';' | '{' TypeBodyElement* '}'
//    ;
//TypeBodyElement :
//      documentation += OwnedDocumentation
//    | ownedRelationship += NonFeatureMember
//    | ownedRelationship += TEMP_RULE /*FeatureMember*/
//    | ownedRelationship += AliasMember
//    | ownedRelationship += Import
//;

/* =============================================================== */
/* SPECIALIZATION */
//Specialization:
//    ( 'specialization' ('<' humanId=Name '>')? ( name=Name )? )?
//    'subtype' SpecificType
//    SPECIALIZES GeneralType ';'
//    ;
//OwnedSpecialization :
//    GeneralType
//    ;
//SpecificType :
//      specific = [QualifiedName]
//    | specific += TEMP_RULE /*FeatureChain*/
//    { ownedRelatedElement += specific }
//;
//GeneralType :
//    general = [QualifiedName]
//    | general += FeatureChain
//    { ownedRelatedElement += general }
//;

/* =============================================================== */
/* KERNEL LAYER RULES */
/* =============================================================== */

/* =============================================================== */
/* PACKAGES */
Package:
//    PackageDeclaration PackageBody*//*
    'package' (('<' humanId=Name '>')? ( name=Name )? )
    (';' | '{' (
          ( ownedRelationship += OwnedDocumentation
          | ownedRelationship += NamespaceMember
          | ownedRelationship += AliasMember
          | ownedRelationship += Import
          )
        | ownedRelationship += ElementFilterMember )*
    '}')
;


PackageDeclaration:
    'package' (('<' humanId=Name '>')? ( name=Name )? | (name=Name))
    ;
PackageBody:
    ';' | '{' (
          ( ownedRelationship += OwnedDocumentation
          | ownedRelationship += NamespaceMember
          | ownedRelationship += AliasMember
          | ownedRelationship += Import
          )
        | ownedRelationship += ElementFilterMember )*
    '}'
;
ElementFilterMember:
    MemberPrefix
    'filter' condition = TEMP_RULE /*OwnedExpression*/ ';'
;

// This is only here to allow the class to be pulled in
Membership:
    'membership' name=Name memberElement=Element ownedMemberElement=Element visibility=VisibilityIndicator
;

/* =============================================================== */
/* TEXTX COMMENTS */
Comment:
    NoteBlock | NoteLine
;

NoteBlock:
    /\/\/\*(.|\n)*?\*\//
;

NoteLine:
    /\/\/.*$/
;

REGULAR_COMMENT:
//    commentText=/\/\*(.*?)\*\//
    commentText=/(?ms)\/\*(.*?)\*\//
;
//
DOCUMENTATION_COMMENT:
    commentText=/\/\*\*(.*?)\*\//
;

/* QualifiedNames */
Qualification
    : Name('::')+
    ;

QualifiedName
    : Qualification? Name
    ;

/* NAMES */
Name:
    !Keyword (BASIC_NAME | '\'' UNRESTRICTED_NAME '\'')
;

BASIC_NAME:
    /([a-zA-Z]|'_')([\w\d])*/
    ;

UNRESTRICTED_NAME:
    /((?!['"])([ -~])|(\\(b|t|n|f|r)))*/
    ;

DECIMAL_DIGIT:
    /\'[0-9]\'/
;

/* TERMINALS */
DECIMAL_VALUE
    : /'0'..'9' ('0'..'9')*/
    ;

EXP_VALUE
    : DECIMAL_VALUE ('e' | 'E') ('+' | '-')? DECIMAL_VALUE
	;

STRING_VALUE
    : /'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"'/
    ;

TYPED_BY    : ':'   | 'typed' 'by';
SPECIALIZES : ':>'  | 'specializes';
SUBSETS     : ':>'  | 'subsets';
REDEFINES   : ':>>' | 'redefines';
CONJUGATES  : '~'   | 'conjugates';

Keyword:
    'element' | 'from' | 'to' | 'doc' | 'rep' |  'about'
//    'element' | 'from' | 'to' | 'doc' | 'rep' | 'language' | 'about'
//    |'package' | 'specialization' | 'import' | 'typed by' | 'subsets' | 'redefines' | 'conjugates'
;

TEMP_RULE: ID ;
//Keyword:
//    'about' | 'abstract' | 'alias' | 'all' | 'and' | 'as' | 'assign' | 'assoc' | 'behavior' | 'binding' | 'bool' | 'by' | 'class'
//    | 'classifier' | 'comment' | 'composite' | 'conjugate' | 'conjugates' | 'conjugation' | 'connector'
//    | 'datatype' | 'default' | 'disjoining' | 'disjoint' | 'doc' | 'element' | 'else' | 'end' | 'expr' | 'false'
//    | 'feature' | 'featured' | 'featuring' | 'filter' | 'first' | 'flow' | 'for' | 'from' | 'function' | 'generalization'
//    | 'hastype' | 'id' | 'if' | 'implies' | 'import' | 'in' | 'inout' | 'interaction' | 'inv' | 'is' | 'istype' | 'language'
//    | 'member' | 'metadata' | 'multiplicity' | 'namespace' | 'nonunique' | 'not' | 'null' | 'of' | 'or' | 'ordered' | 'out'
//    | 'package' | 'portion' | 'predicate' | 'private' | 'protected' | 'public' | 'redefines' | 'redefinition'
//    | 'relationship' | 'rep' | 'return' | 'specialization' | 'specializes' | 'step' | 'stream' | 'struct'
//    | 'subclassifier' | 'subset' | 'subsets' | 'subtype' | 'succession' | 'then' | 'to' | 'true' | 'type' | 'typed'
//    ;