/* Elements */
Namespace:
	namespaceBodyElement*=Element
;

Element:
    'element' ('<' humanId=Name '>')? ( name=Name )?
    (';' | '{' ownedElement=OwnedElement '}')
;

OwnedElement:
      ownedRelationship += OwnedRelationship
;

/* Relationships */
Relationship:
    ref=[Element]
//    type=[Element]
    'relationship' ('<' humanId=Name '>')? ( name=Name )?
    RelationshipRelatedElements
    RelationshipBody
;

OwnedRelationship:
    'relationship' ('<' humanId=Name '>')?
    ( 'to' RelationshipTargetList )?
    RelationshipBody
;

RelationshipRelatedElements:
      ('from' RelationshipSourceList)? ('to' RelationshipTargetList)?
;

RelationshipSourceList:
    RelationshipSource ( ',' RelationshipSource )*
;

RelationshipSource:
    source += [Element | QualifiedName]
;

RelationshipTargetList:
    RelationshipTarget ( ',' RelationshipTarget )*
;

RelationshipTarget:
    target += [Element | QualifiedName]
;

RelationshipBody:
    ';' | '{' RelationshipOwnedElement* '}'
;

RelationshipOwnedElement:
      ownedRelatedElement += OwnedRelatedElement
    | ownedRelatedElement += OwnedRelatedRelationship
;

OwnedRelatedElement:
    type=[Element]
    'element' ('<' humanId=Name '>')? ( name=Name )?
    (';' | '{' ownedElement=OwnedElement '}')
;

OwnedRelatedRelationship:
    type=[Relationship]
	'relationship' ('<' humanId=Name '>')? ( name=Name )?
	RelationshipRelatedElements
	RelationshipBody
;

// COMMON

/* NAMES */
Name
    : !Keyword (ID | UNRESTRICTED_NAME | STRING)
    ;

Qualification
   : ( Name '::' )+
//    : Name*['::']
    ;

QualifiedName
    : Qualification? Name
    ;

/* TERMINALS */
DECIMAL_VALUE
    : /'0'..'9' ('0'..'9')*/
    ;

EXP_VALUE
    : DECIMAL_VALUE ('e' | 'E') ('+' | '-')? DECIMAL_VALUE
	;

UNRESTRICTED_NAME
//    : /'\'' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '\''))* '\''/
    : ID
    ;

STRING_VALUE
    : /'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"'/
    ;

REGULAR_COMMENT
    : /\/\* !('*') -> \*\//
    ;

DOCUMENTATION_COMMENT
    : /\/\*\* \w+ \*\//
    ;

ML_NOTE
    : /\/\/\* -> \*\//
    ;

SL_NOTE
//    : '//' (!('\n' | '\r') !('\n' | '\r')*)? ('\r'? '\n')?
    : /\/\/.*$/
    ;

WS
    : (' ' | '\t' | '\r' | '\n')+
    ;

Keyword:
    'element' | 'language' | 'to' | 'relationship' | 'package'
    ;