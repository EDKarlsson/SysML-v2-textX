/* Elements */
RootNamespace:
      ( ownedRelationship += OwnedDocumentation
      | ownedRelationship += NamespaceMember
      | ownedRelationship += AliasMember
      | ownedRelationship += Import
      )*
;

Element:
    'element' (('<' humanId=Name '>' name=Name ) | ( '<' name=Name '>' ) | name=Name)
    (';' | '{'
        (   ownedRelationship += OwnedRelationship
            | ownedRelationship += OwnedDocumentation
            | ownedRelationship += OwnedTextualRepresentationAnnotation
        )*
    '}')
;

/* =============================================================== */
/* Relationships */
Relationship:
    'relationship' (('<' humanId=Name '>' name=Name ) | ( '<' name=Name '>' ) | name=Name)?
        ('from' source+=[Element|QualifiedName][','])?
        ('to' target+=[Element|QualifiedName][','])?
    (';' | '{'
        ownedRelatedElement+=RelationshipOwnedElement
    '}')
;

OwnedRelationship:
    'relationship' ('<' name=Name '>')? ('to' target+=[Element|QualifiedName][','])?
    (';' | '{'
        ownedRelatedElement+=RelationshipOwnedElement
    '}')
;

RelationshipOwnedElement:
      Element | Relationship
;

/* =============================================================== */
/* Namespace */
Namespace:
    'namespace' (('<' humanId=Name '>' name=Name ) | ( '<' name=Name '>' ) | name=Name)
    (';' | '{'
      ( ownedRelationship += OwnedDocumentation
      | ownedRelationship += NamespaceMember
      | ownedRelationship += AliasMember
      | ownedRelationship += Import
      )*
    '}')
;

MemberPrefix:
    ( ownedRelationship += PrefixDocumentation )*
    ( visibility = VisibilityIndicator )?
;
NamespaceMember:
      NonFeatureMember
    | FeatureNamespaceMember
    | ChainFeatureMember
;
NonFeatureMember:
    MemberPrefix
    ownedMemberElement=NonFeatureElement
;
FeatureNamespaceMember:
    MemberPrefix
    ownedMemberElement=FeatureElement
;
ChainFeatureMember:
    MemberPrefix
    'feature'? ( name=Name )? 'is'
//    ownedMemberElement = FeatureChain
;
AliasMember:
    MemberPrefix
    'alias' name=Name 'for'
    memberElement=[Element|QualifiedName] ';'
;
Import:
    ( ownedRelationship += PrefixDocumentation )*
    ( visibility = VisibilityIndicator )?
    'import' ( isImportAll ?= 'all' )?
        ( ImportedNamespace
        | ImportedFilterPackage ) ';'
;
ImportedNamespace:
    ( importedNamespace = [Namespace|QualifiedName] '::' )?
    ( importedName=Name | '*' )
    ( '::' isRecursive ?= '**' )?
;
ImportedFilterPackage:
    ownedRelatedElement += FilterPackage
;
FilterPackage:
    ownedRelationship += FilterPackageImport
    ( ownedRelationship += FilterPackageMember )+
;
FilterPackageImport:
    ImportedNamespace
;
FilterPackageMember:
    '[' condition=TEMP_RULE /*OwnedExpression*/ ']'
;
VisibilityIndicator :
    'public' | 'private' | 'protected'
;

//Visibility:
//    'public' | 'private' | 'protected'
//;

NonFeatureElement:
    Element
    | Relationship
    | ModelComment
    | TextualRepresentation
//    | 'AnnotatingFeature'
    | Namespace
    | Type
//    | Classifier
//    | DataType
//    | Class
//    | Structure
//    | Association
//    | AssociationStructure
//    | Interaction
//    | Behavior
//    | Function
//    | Predicate
//    | Multiplicity
    | Package
    | Conjugation
//    | Subclassification
    | Disjoining
    | FeatureTyping
//    | Subsetting
//    | Redefinition
    | TypeFeaturing
;
FeatureElement:
      Feature
//    | Step
//    | Expression
//    | BooleanExpression
//    | Invariant
//    | Connector
//    | BindingConnector
//    | Succession
//    | ItemFlow
//    | SuccessionItemFlow
;

/* =============================================================== */
/* Comments */
ModelComment:
	( 'comment' (('<' humanId=Name '>' name=Name ) | ( '<' name=Name '>' ) | name=Name)
	  'about' ownedRelationship += Annotation
      //{ ownedRelationship += annotation }
      ownedRelationship += [Annotation|QualifiedName]
	  ( ',' ownedRelationship += Annotation )*
	  | ( 'comment' (('<' humanId=Name '>' name=Name ) | ( '<' name=Name '>' ) | name=Name) )?
	  ownedRelationship += ElementAnnotation
      //{ ownedRelationship += annotation }
      ownedRelationship += [Annotation|QualifiedName]
	)
	body = /(?ms)\/\*(.*?)\*\//
;

Annotation:
	annotatedElement = [Element|QualifiedName]
;

ElementAnnotation:
//    type=[Annotation]
    annotatedElement = [Element|QualifiedName]
;

/* =============================================================== */
/* DOCUMENTATION */
OwnedDocumentation:
    documentingComment=DocumentationComment
;

DocumentationComment:
    'doc' ('<' name = Name '>' )? body=/(?ms)\/\*(.*?)\*\//
//    'doc' ('<' humanId = Name '>' )? body=/(?ms)\/\*(.*?)\*\//
;

PrefixDocumentation:
	documentingComment=PrefixDocumentationComment
;

PrefixDocumentationComment:
	( 'doc' ( '<' name = Name '>' )? )? body=/(?ms)\/\*\*(.*?)\*\//
;

/* =============================================================== */
/* Textual Representation */
OwnedTextualRepresentationAnnotation:
    ownedRelatedElement += OwnedTextualRepresentation
;

OwnedTextualRepresentation:
    ( 'rep' ( name=Name )? )?
    'language' language=QuotedID body=REGULAR_COMMENT
;

TextualRepresentation:
    (   'rep' (('<' humanId=Name '>' name=Name ) | ( '<' name=Name '>' ) | name=Name)?
        'about' annotation+=Annotation
    | ( 'rep' (('<' humanId=Name '>' name=Name ) | ( '<' name=Name '>' ) | name=Name)? )?
        ElementAnnotation
    )
    'language' language=QuotedID body=REGULAR_COMMENT
;

FullyQualifiedID[noskipws]:
    /\s*/-
    QuotedID+['.']
    /\s*/-
;
QuotedID:
    '"'?- ID '"'?-
;

/* =============================================================== */
/* CORE LAYER RULES */
/* =============================================================== */

/* =============================================================== */
/* TYPES */
Type:
    ( isAbstract ?= 'abstract' )? 'type'
    ( isSufficient ?= 'all' )? (('<' humanId=Name '>' name=Name ) | ( '<' name=Name '>' ) | name=Name)?
//    ( ownedRelationship += OwnedMultiplicity )?
    ( SpecializationPart | ConjugationPart )+
//    DisjoiningPart?
    (
        ';' | '{'
            (
              documentation += OwnedDocumentation
             | ownedRelationship += NonFeatureMember
             | ownedRelationship += FeatureMember
             | ownedRelationship += AliasMember
             | ownedRelationship += Import
            )*
        '}'
    )
    ;

SpecializationPart:
    SPECIALIZES ownedRelationship += OwnedSpecialization
    ( ',' ownedRelationship += OwnedSpecialization )*
    ;

ConjugationPart:
    CONJUGATES ownedRelationship += OwnedConjugation
;

DisjoiningPart:
    'disjoint' 'from' ownedRelationship += OwnedDisjoining
    ( ',' ownedRelationship += OwnedDisjoining )*
    ;

/* =============================================================== */
/* SPECIALIZATION */
Specialization:
    ( 'specialization' (('<' humanId=Name '>' name=Name ) | ( '<' name=Name '>' ) | name=Name)?)?
    'subtype' SpecificType
    SPECIALIZES GeneralType ';'
    ;
OwnedSpecialization :
    GeneralType
    ;
SpecificType :
      specific = [QualifiedName]
//    | specific += FeatureChain
//    { ownedRelatedElement += specific }
;
GeneralType :
    general = [QualifiedName]
//    | general += FeatureChain
//    { ownedRelatedElement += general }
;

/* =============================================================== */
/* CONJUGATION */
Conjugation:
    ( 'conjugation' (('<' humanId=Name '>' name=Name ) | ( '<' name=Name '>' ) | name=Name)? )?
    'conjugate'
    ( conjugatedType=[Type|QualifiedName]
//    | conjugatedType = FeatureChain
//      { ownedRelatedElement += conjugatedType }
    )
    CONJUGATES
    ( originalType=[Type|QualifiedName]
//    | originalType = FeatureChain
//      { ownedRelatedElement += originalType }
      ) ';'
;

OwnedConjugation:
      originalType=[Type|QualifiedName]
//    | originalType = FeatureChain
//      { ownedRelatedElement += originalType }
;

/* =============================================================== */
/* DISJOINING */
Disjoining:
    ( 'disjoining' (('<' humanId=Name '>' name=Name ) | ( '<' name=Name '>' ) | name=Name)? )?
    'disjoint' ( typeDisjoined = [Type|QualifiedName]
//    | typeDisjoined = FeatureChain
//    { ownedRelatedElement += typeDisjoined }
    )
    'from' ( disjoiningType = [Type|QualifiedName]
//    | disjoinginType = FeatureChain
//    { ownedRelatedElement += disjoiningType }
    ) ';'
;
OwnedDisjoining:
    disjoiningType = [Type|QualifiedName]
//    | disjoinginType = FeatureChain
//    { ownedRelatedElement += disjoiningType }
;

/* =============================================================== */
/* FEATURE MEMBER */
FeatureMember :
      TypeFeatureMember
    | OwnedFeatureMember
    | UnownedFeatureMember
//    | ChainingFeatureMember
;
TypeFeatureMember:
    MemberPrefix 'member' ownedMemberElement = FeatureElement
;

OwnedFeatureMember:
    MemberPrefix ownedMemberFeature = FeatureElement
;

UnownedFeatureMember:
    MemberPrefix 'feature'? ( name=Name )? 'is'
    memberFeature = [Membership|QualifiedName]
;

/* =============================================================== */
/* PACKAGES */
FeaturePrefix:
    ( direction = FeatureDirection )?
    ( isAbstract ?= 'abstract' )?
    ( isComposite ?= 'composite' | isPortion ?= 'portion' )?
    ( isReadOnly ?= 'readonly' )?
    ( isDerived ?= 'derived' )?
    ( isEnd ?= 'end' )?
;
FeatureDirection :
    'in' | 'out' | 'inout'
;
Feature:
    FeaturePrefix
   'feature'?
   // FeatureDeclaration
    ( isSufficient ?= 'all' )? (('<' humanId=Name '>' name=Name ) | ( '<' name=Name '>' ) | name=Name)?
    ( FeatureSpecializationPart | ConjugationPart )?
    DisjoiningPart?
    TypeFeaturingPart?
   // FeatureDeclaration
    ValuePart? TypeBody
;
TypeFeaturingPart:
    'featured' 'by' ownedRelatioship += OwnedTypeFeaturing
    ( ',' ownedTypeFeaturing += OwnedTypeFeaturing )*
;
FeatureSpecializationPart:
      FeatureSpecialization + MultiplicityPart? FeatureSpecialization*
    | MultiplicityPart FeatureSpecialization*
    ;
MultiplicityPart:
      ownedRelationship += 'OwnedMultiplicity'
    | ( ownedRelationship += 'OwnedMultiplicity' )?
//      ( isOrdered ?= 'ordered' ( !isUnique ?= 'nonunique' )?
//      | !isUnique ?= 'nonunique' ( isOrdered ?= 'ordered' )? )
      ;
FeatureSpecialization :
    Typings | Subsettings | Redefinitions
;
Typings:
      TypedBy ( ',' ownedRelationship += OwnedFeatureTyping )*
  ;
TypedBy:
    TYPED_BY ownedRelationship += OwnedFeatureTyping
;
Subsettings:
    Subsets ( ',' ownedRelationship += OwnedSubsetting )*
;
Subsets:
    SUBSETS ownedRelationship += OwnedSubsetting
;
Redefinitions:
    Redefines ( ',' ownedRelationship += OwnedRedefinition )*
;
Redefines:
    REDEFINES ownedRelationship += OwnedRedefinition
;

/* =============================================================== */
/* TYPE FEATURING */
TypeFeaturing:
    'featuring' ( (('<' humanId=Name '>' name=Name ) | ( '<' name=Name '>' ) | name=Name)? 'of')?
    featureOfType = [Type|QualifiedName]
    'by' featuringType = [Type|QualifiedName] ';'
    ;
OwnedTypeFeaturing:
    featuringType = [TypeFeaturing|QualifiedName]
    ;

/* =============================================================== */
/* FEATURING TYPE */
FeatureTyping:
    ( 'specialization' (('<' humanId=Name '>' name=Name ) | ( '<' name=Name '>' ) | name=Name)? )?
    'typing' typedFeature = [Type|QualifiedName]
    TYPED_BY general = [Type|QualifiedName] ';'
;
OwnedFeatureTyping :
    general = [FeatureTyping|QualifiedName]
;

/* =============================================================== */
/* KERNEL LAYER RULES */
/* =============================================================== */

/* =============================================================== */
/* PACKAGES */
Package:
    'package' (('<' humanId=Name '>' name=Name ) | ( '<' name=Name '>' ) | name=Name)?
    (';'
    | '{'
         (
           (
             ownedRelationship += OwnedDocumentation
             | ownedRelationship += NamespaceMember
             | ownedRelationship += AliasMember
             | ownedRelationship += Import
           )
           | ownedRelationship += ElementFilterMember
         )*
      '}'
    )
;

//PackageDeclaration:
//    'package' (('<' humanId=Name '>' name=Name ) | ( '<' name=Name '>' ) | name=Name)?
//    ;
//
//PackageBody:
//    ';' | '{' (
//          ( ownedRelationship += OwnedDocumentation
//          | ownedRelationship += NamespaceMember
//          | ownedRelationship += AliasMember
//          | ownedRelationship += Import
//          )
//        | ownedRelationship += ElementFilterMember )*
//    '}'
//;
ElementFilterMember:
    MemberPrefix
    'filter' condition = TEMP_RULE /*OwnedExpression*/ ';'
;

// This is only here to allow the class to be pulled in
Membership:
    'membership' name=Name memberElement=Element ownedMemberElement=Element visibility=VisibilityIndicator
;

ValuePart: 'ValuePart' ;
TypeBody: 'TypeBody' ;
OwnedSubsetting: 'OwnedSubsetting' ;
OwnedRedefinition: 'OwnedRedefinition' ;

/* =============================================================== */
/* TEXTX COMMENTS */
Comment:
    NoteBlock | NoteLine
;

NoteBlock:
    /\/\/\*(.|\n)*?\*\//
;

NoteLine:
    /\/\/.*$/
;

REGULAR_COMMENT:
//    commentText=/\/\*(.*?)\*\//
    commentText=/(?ms)\/\*(.*?)\*\//
;
//
DOCUMENTATION_COMMENT:
    commentText=/\/\*\*(.*?)\*\//
;

/* QualifiedNames */
Qualification:
    ('::'Name)+
    ;

QualifiedName
    : Name Qualification?
    ;

/* NAMES */
Name:
    !Keyword (BASIC_NAME | '\'' UNRESTRICTED_NAME '\'')
;

BASIC_NAME:
    /([a-zA-Z]|'_')([\w\d])*/
    ;

UNRESTRICTED_NAME:
    /((?!['"])([ -~])|(\\(b|t|n|f|r)))*/
    ;

DECIMAL_DIGIT:
    /\'[0-9]\'/
;

/* TERMINALS */
DECIMAL_VALUE
    : /'0'..'9' ('0'..'9')*/
    ;

EXP_VALUE
    : DECIMAL_VALUE ('e' | 'E') ('+' | '-')? DECIMAL_VALUE
	;

STRING_VALUE
    : /'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"'/
    ;

TYPED_BY    : ':'   | 'typed' 'by';
SPECIALIZES : ':>'  | 'specializes';
SUBSETS     : ':>'  | 'subsets';
REDEFINES   : ':>>' | 'redefines';
CONJUGATES  : '~'   | 'conjugates';

Keyword:
    'element' | 'from' | 'to' | 'doc' | 'rep' |  'about'
//    'element' | 'from' | 'to' | 'doc' | 'rep' | 'language' | 'about'
//    |'package' | 'specialization' | 'import' | 'typed by' | 'subsets' | 'redefines' | 'conjugates'
;

TEMP_RULE: ID ;
//Keyword:
//    'about' | 'abstract' | 'alias' | 'all' | 'and' | 'as' | 'assign' | 'assoc' | 'behavior' | 'binding' | 'bool' | 'by' | 'class'
//    | 'classifier' | 'comment' | 'composite' | 'conjugate' | 'conjugates' | 'conjugation' | 'connector'
//    | 'datatype' | 'default' | 'disjoining' | 'disjoint' | 'doc' | 'element' | 'else' | 'end' | 'expr' | 'false'
//    | 'feature' | 'featured' | 'featuring' | 'filter' | 'first' | 'flow' | 'for' | 'from' | 'function' | 'generalization'
//    | 'hastype' | 'id' | 'if' | 'implies' | 'import' | 'in' | 'inout' | 'interaction' | 'inv' | 'is' | 'istype' | 'language'
//    | 'member' | 'metadata' | 'multiplicity' | 'namespace' | 'nonunique' | 'not' | 'null' | 'of' | 'or' | 'ordered' | 'out'
//    | 'package' | 'portion' | 'predicate' | 'private' | 'protected' | 'public' | 'redefines' | 'redefinition'
//    | 'relationship' | 'rep' | 'return' | 'specialization' | 'specializes' | 'step' | 'stream' | 'struct'
//    | 'subclassifier' | 'subset' | 'subsets' | 'subtype' | 'succession' | 'then' | 'to' | 'true' | 'type' | 'typed'
//    ;