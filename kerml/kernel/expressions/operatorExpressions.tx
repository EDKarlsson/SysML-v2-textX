
/* Operator Expressions */

OwnedExpressionMember returns SysML::FeatureMembership :
	ownedRelatedElement += OwnedExpression // ownedMemberFeature = OwnedExpression
;

OwnedExpression returns SysML::Expression :
	 ConditionalExpression
;

// Conditional Test Expressions

ConditionalExpression returns SysML::Expression :
	  NullCoalescingExpression ( {SysML::OperatorExpression.operand += current}
		  operator = ConditionalOperator operand += OwnedExpression ':' operand += ConditionalExpression
	  )?
	| {SysML::OperatorExpression} 'if' operand += NullCoalescingExpression
		  operator = ConditionalOperator operand += OwnedExpression 'else' operand += ConditionalExpression
;

ConditionalOperator :
	'?'
;

// Null Coalescing Expressions

NullCoalescingExpression returns SysML::Expression :
	ImpliesExpression ( {SysML::OperatorExpression.operand += current}
		operator = NullCoalescingOperator operand += ImpliesExpression )*
;

NullCoalescingOperator :
	'??'
;

// Logical Expressions

ImpliesExpression returns SysML::Expression :
	OrExpression ( {SysML::OperatorExpression.operand += current}
		operator = ImpliesOperator operand += OrExpression )*
;

ImpliesOperator :
	'=>' | 'implies'
;

OrExpression returns SysML::Expression :
	XorExpression ( {SysML::OperatorExpression.operand += current}
		operator = OrOperator operand += XorExpression )*
;

OrOperator :
	'|' | '||' | 'or'
;

XorExpression returns SysML::Expression :
	AndExpression ( {SysML::OperatorExpression.operand += current}
		operator = XorOperator operand += AndExpression )*
;

XorOperator :
	'^^' | 'xor'
;

AndExpression returns SysML::Expression :
	EqualityExpression ( {SysML::OperatorExpression.operand += current}
		operator = AndOperator operand += EqualityExpression )*
;

AndOperator :
	'&' | '&&' | 'and'
;

// Equality Expressions

EqualityExpression returns SysML::Expression :
	ClassificationExpression ( {SysML::OperatorExpression.operand += current}
		operator = EqualityOperator operand += ClassificationExpression )*

;

EqualityOperator :
	'==' | '!='
;

// Classification Expressions

ClassificationExpression returns SysML::Expression :
	  RelationalExpression ( {SysML::OperatorExpression.operand += current}
		operator = ClassificationOperator ownedRelationship += TypeReferenceMember )?
	| {SysML::OperatorExpression} operand += SelfReferenceExpression
		operator = ClassificationOperator ownedRelationship += TypeReferenceMember
;

ClassificationOperator :
	'hastype' | 'istype' | '@' | 'as'
;

TypeReferenceMember returns SysML::FeatureMembership :
	ownedRelatedElement += TypeReference
	// ownedMemberFeature = TypeReference
;

TypeReference returns SysML::Feature :
	ownedRelationship += ReferenceTyping
;

ReferenceTyping returns SysML::FeatureTyping :
	  type = [SysML::Type | QualifiedName]
;

SelfReferenceExpression returns SysML::FeatureReferenceExpression :
	ownedRelationship += SelfReferenceMember
;

SelfReferenceMember returns SysML::ReturnParameterMembership :
	ownedRelatedElement += EmptyFeature // ownedMemberFeature = EmptyFeature
;

EmptyFeature returns SysML::Feature :
	{SysML::Feature}
;

// Relational Expressions

RelationalExpression returns SysML::Expression :
	RangeExpression ( {SysML::OperatorExpression.operand += current}
		operator = RelationalOperator operand += RangeExpression )*
;

RelationalOperator :
	'<' | '>' | '<=' | '>='
;

// Range Expressions

RangeExpression returns SysML::Expression :
	AdditiveExpression ( {SysML::OperatorExpression.operand += current}
		operator = '..' operand += AdditiveExpression )?
;

// Arithmetic Expressions

AdditiveExpression returns SysML::Expression :
	MultiplicativeExpression ( {SysML::OperatorExpression.operand += current}
		operator = AdditiveOperator operand += MultiplicativeExpression )*
;

AdditiveOperator :
	'+' | '-'
;

MultiplicativeExpression returns SysML::Expression :
	ExponentiationExpression ( {SysML::OperatorExpression.operand += current}
		operator = MultiplicativeOperator operand += ExponentiationExpression )*
;

MultiplicativeOperator :
	'*' | '/' | '%'
;

ExponentiationExpression returns SysML::Expression :
	UnaryExpression ( {SysML::OperatorExpression.operand += current}
		operator = ExponentiationOperator operand += UnaryExpression )*
;

ExponentiationOperator :
	'**' | '^'
;

// Unary Expressions

UnaryExpression returns SysML::Expression:
	  {SysML::OperatorExpression} operator = UnaryOperator operand += ExtentExpression
	| ExtentExpression
;

UnaryOperator :
	'+' | '-' | '!' | '~' | 'not'
;

// Extent Expressions

ExtentExpression returns SysML::Expression :
	  {SysML::OperatorExpression} operator = 'all' ownedRelationship += TypeReferenceMember
	| PrimaryExpression
;
