(:~ /* converted on Tue Feb 1, 2022, 09:18 (UTC-08) by xtext-to-w3c v0.57 which is Copyright (c) 2011-2022 by Gunther Rademacher <grd@gmx.net> */ ~:)

RootNamespace
         ::= NamespaceBodyElement*
Identification
         ::= '<' Name '>' Name?
           | Name
Element  ::= 'element' Identification? ElementBody
ElementBody
         ::= ';'
           | '{' OwnedElement* '}'
OwnedElement
         ::= OwnedRelationship
           | OwnedDocumentation
           | OwnedTextualRepresentationAnnotation
           | OwnedAnnotatingFeatureAnnotation
Relationship
         ::= 'relationship' Identification? RelationshipRelatedElements RelationshipBody
OwnedRelationship
         ::= 'relationship' Identification? ( 'to' RelationshipTargetList )? RelationshipBody
RelationshipRelatedElements
         ::= ( 'from' RelationshipSourceList )? ( 'to' RelationshipTargetList )?
RelationshipSourceList
         ::= RelationshipSource ( ',' RelationshipSource )*
RelationshipSource
         ::= QualifiedName
RelationshipTargetList
         ::= RelationshipTarget ( ',' RelationshipTarget )*
RelationshipTarget
         ::= QualifiedName
RelationshipBody
         ::= ';'
           | '{' RelationshipOwnedElement* '}'
RelationshipOwnedElement
         ::= OwnedRelatedElement
           | OwnedRelatedRelationship
           | OwnedDocumentation
           | OwnedTextualRepresentationAnnotation
OwnedRelatedElement
         ::= 'element' ( '<' Name '>' )? ElementBody
OwnedRelatedRelationship
         ::= 'relationship' ( '<' Name '>' )? RelationshipRelatedElements RelationshipBody
Comment  ::= ( 'comment' Identification? 'about' Annotation ( ',' Annotation )* | ( 'comment' Identification? )? EmptyAnnotation ) REGULAR_COMMENT
Annotation
         ::= QualifiedName


EmptyAnnotation
         ::=
OwnedDocumentation
         ::= DocumentationComment
DocumentationComment
         ::= 'doc' ( '<' Name '>' )? REGULAR_COMMENT
PrefixDocumentation
         ::= PrefixDocumentationComment
PrefixDocumentationComment
         ::= ( 'doc' ( '<' Name '>' )? )? DOCUMENTATION_COMMENT
OwnedTextualRepresentationAnnotation
         ::= OwnedTextualRepresentation
OwnedTextualRepresentation
         ::= ( 'rep' Name? )? 'language' STRING_VALUE REGULAR_COMMENT EmptyAnnotation
TextualRepresentation
         ::= ( 'rep' Identification? 'about' Annotation | ( 'rep' Identification? )? EmptyAnnotation ) 'language' STRING_VALUE REGULAR_COMMENT
OwnedAnnotatingFeatureAnnotation
         ::= OwnedAnnotatingFeature
OwnedAnnotatingFeature
         ::= 'metadata' ( Name ( ':' | 'typed' 'by' ) )? MetadataTyping EmptyAnnotation AnnotatingFeatureBody
AnnotatingFeature
         ::= ( '@' | 'metadata' ) AnnotatingFeatureDeclaration ( 'about' Annotation ( ',' Annotation )* | EmptyAnnotation ) AnnotatingFeatureBody
AnnotatingFeatureDeclaration
         ::= ( Identification ( ':' | 'typed' 'by' ) )? MetadataTyping
MetadataTyping
         ::= QualifiedName
AnnotatingFeatureBody
         ::= ';'
           | '{' MetadataFeatureMember* '}'
MetadataFeatureMember
         ::= MetadataFeature
MetadataFeature
         ::= 'feature'? ( ':>>' | 'redefines' )? OwnedRedefinition '=' MetadataFeatureValue ';'
MetadataFeatureValue
         ::= OwnedExpression
Namespace
         ::= NamespaceDeclaration NamespaceBody
NamespaceDeclaration
         ::= 'namespace' Identification?
NamespaceBody
         ::= ';'
           | '{' ( OwnedDocumentation | NamespaceMember | AliasMember | Import )* '}'
NamespaceBodyElement
         ::= OwnedDocumentation
           | NamespaceMember
           | AliasMember
           | Import
MemberPrefix
         ::= PrefixDocumentation* VisibilityIndicator?
NamespaceMember
         ::= NonFeatureMember
           | NamespaceFeatureMember
           | ChainFeatureMember
NonFeatureMember
         ::= MemberPrefix NonFeatureElement
NamespaceFeatureMember
         ::= MemberPrefix FeatureElement
ChainFeatureMember
         ::= MemberPrefix 'feature'? Name? 'is' FeatureChain ';'
AliasMember
         ::= MemberPrefix 'alias' Name 'for' QualifiedName ';'
Import   ::= PrefixDocumentation* VisibilityIndicator? 'import' 'all'? ( ImportedNamespace | ImportedFilterPackage ) ';'
ImportedNamespace
         ::= Qualification? ( Name | '*' ) ( '::' '**' )?
ImportedFilterPackage
         ::= FilterPackage
FilterPackage
         ::= FilterPackageImport FilterPackageMember+
FilterPackageImport
         ::= ImportedNamespace
FilterPackageMember
         ::= FilterPackageMemberVisibility OwnedExpression ']'
NonFeatureElement
         ::= Element
           | Relationship
           | Comment
           | TextualRepresentation
           | AnnotatingFeature
           | Namespace
           | Package
           | Multiplicity
           | Type
           | Classifier
           | Class
           | Structure
           | DataType
           | Association
           | AssociationStructure
           | Interaction
           | Behavior
           | Function
           | Predicate
           | Specialization
           | Conjugation
           | FeatureTyping
           | Subclassification
           | Disjoining
           | Subsetting
           | Redefinition
           | TypeFeaturing
FeatureElement
         ::= Feature
           | Step
           | Expression
           | BooleanExpression
           | Invariant
           | Connector
           | BindingConnector
           | Succession
           | ItemFlow
           | SuccessionItemFlow
Package  ::= PackageDeclaration PackageBody
PackageDeclaration
         ::= 'package' Identification?
PackageBody
         ::= ';'
           | '{' ( OwnedDocumentation | NamespaceMember | ElementFilterMember | AliasMember | Import )* '}'
ElementFilterMember
         ::= MemberPrefix 'filter' OwnedExpression ';'
Type     ::= 'abstract'? 'type' TypeDeclaration TypeBody
TypeDeclaration
         ::= 'all'? Identification? OwnedMultiplicity? ( SpecializationPart | ConjugationPart )+ DisjoiningPart?
SpecializationPart
         ::= ( ':>' | 'specializes' ) OwnedSpecialization ( ',' OwnedSpecialization )*
ConjugationPart
         ::= ( '~' | 'conjugates' ) OwnedConjugation
DisjoiningPart
         ::= 'disjoint' 'from' OwnedDisjoining ( ',' OwnedDisjoining )*
TypeBody ::= ';'
           | '{' ( OwnedDocumentation | NonFeatureMember | FeatureMember | AliasMember | Import )* '}'
FeatureMember
         ::= TypeFeatureMember
           | OwnedFeatureMember
           | UnownedFeatureMember
           | ChainFeatureMember
TypeFeatureMember
         ::= MemberPrefix 'member' FeatureElement
OwnedFeatureMember
         ::= MemberPrefix FeatureElement
UnownedFeatureMember
         ::= MemberPrefix 'feature'? Name? 'is' QualifiedName ';'
Specialization
         ::= ( 'specialization' Identification? )? 'subtype' ( QualifiedName | FeatureChain ) ( ':>' | 'specializes' ) ( QualifiedName | FeatureChain ) ';'
OwnedSpecialization
         ::= QualifiedName
           | FeatureChain
Conjugation
         ::= ( 'conjugation' Identification? )? 'conjugate' ( QualifiedName | FeatureChain ) ( '~' | 'conjugates' ) ( QualifiedName | FeatureChain ) ';'
OwnedConjugation
         ::= QualifiedName
           | FeatureChain
Disjoining
         ::= ( 'disjoining' Identification? )? 'disjoint' ( QualifiedName | FeatureChain ) 'from' ( QualifiedName | FeatureChain ) ';'
OwnedDisjoining
         ::= QualifiedName
           | FeatureChain
Classifier
         ::= 'abstract'? 'classifier' ClassifierDeclaration TypeBody
ClassifierDeclaration
         ::= 'all'? Identification? OwnedMultiplicity? ( SuperclassingPart | ClassifierConjugationPart )? DisjoiningPart?
SuperclassingPart
         ::= ( ':>' | 'specializes' ) Ownedsubclassification ( ',' Ownedsubclassification )*
ClassifierConjugationPart
         ::= ( '~' | 'conjugates' ) ClassifierConjugation
Subclassification
         ::= ( 'specialization' Identification? )? 'subclassifier' QualifiedName ( ':>' | 'specializes' ) QualifiedName ';'
Ownedsubclassification
         ::= QualifiedName
ClassifierConjugation
         ::= QualifiedName
FeaturePrefix
         ::= FeatureDirection? 'abstract'? ( 'composite' | 'portion' )? 'readonly'? 'derived'? 'end'?
Feature  ::= FeaturePrefix ( 'feature'? FeatureDeclaration | 'feature' ) ValuePart? TypeBody
FeatureDeclaration
         ::= 'all'? ( Identification ( FeatureSpecializationPart | FeatureConjugationPart )? | FeatureSpecializationPart | FeatureConjugationPart ) DisjoiningPart? TypeFeaturingPart?
TypeFeaturingPart
         ::= 'featured' 'by' OwnedTypeFeaturing ( ',' OwnedTypeFeaturing )*
FeatureSpecializationPart
         ::= ( FeatureSpecialization+ MultiplicityPart? | MultiplicityPart ) FeatureSpecialization*
MultiplicityPart
         ::= OwnedMultiplicity
           | OwnedMultiplicity? ( 'ordered' 'nonunique'? | 'nonunique' 'ordered'? )
FeatureSpecialization
         ::= Typings
           | Subsettings
           | Redefinitions
Typings  ::= TypedBy ( ',' OwnedFeatureTyping )*
TypedBy  ::= ( ':' | 'typed' 'by' ) OwnedFeatureTyping
Subsettings
         ::= Subsets ( ',' OwnedSubsetting )*
Subsets  ::= ( ':>' | 'subsets' ) OwnedSubsetting
Redefinitions
         ::= Redefines ( ',' OwnedRedefinition )*
Redefines
         ::= ( ':>>' | 'redefines' ) OwnedRedefinition
TypeFeaturing
         ::= 'featuring' ( Identification? 'of' )? QualifiedName 'by' QualifiedName ';'
OwnedTypeFeaturing
         ::= QualifiedName
FeatureTyping
         ::= ( 'specialization' Identification? )? 'typing' QualifiedName ( ':' | 'typed' 'by' ) FeatureType ';'
OwnedFeatureTyping
         ::= FeatureType
FeatureType
         ::= QualifiedName
           | FeatureChain
Subsetting
         ::= ( 'specialization' Identification? )? 'subset' ( QualifiedName | FeatureChain ) ( ':>' | 'subsets' ) ( QualifiedName | FeatureChain ) ';'
OwnedSubsetting
         ::= QualifiedName
           | FeatureChain
Redefinition
         ::= ( 'specialization' Identification? )? 'redefinition' ( QualifiedName | FeatureChain ) ( ':>>' | 'redefines' ) ( QualifiedName | FeatureChain ) ';'
OwnedRedefinition
         ::= QualifiedName
           | FeatureChain
FeatureConjugationPart
         ::= ( '~' | 'conjugates' ) FeatureConjugation
FeatureConjugation
         ::= QualifiedName
ValuePart
         ::= FeatureValue
           | FeatureValueExpression EmptyFeatureWriteMember
FeatureValue
         ::= ( '=' | 'default' ( '=' | ':=' )? ) OwnedExpression
FeatureValueExpression
         ::= ':=' OwnedExpression
EmptyFeatureWriteMember
         ::= EmptyFeatureWrite
EmptyFeatureWrite
         ::= EmptyTargetMember EmptyParameterMember
EmptyTargetMember
         ::= EmptyTargetParameter
EmptyTargetParameter
         ::= TargetFeatureMember
TargetFeatureMember
         ::= TargetFeature
TargetFeature
         ::= EmptyFeatureMember
EmptyFeatureMember
         ::= EmptyFeature
EmptyParameterMember
         ::= EmptyFeature
Multiplicity
         ::= MultiplicitySubset
           | MultiplicityRange
MultiplicitySubset
         ::= 'multiplicity' Identification? Subsets
MultiplicityRange
         ::= 'multiplicity' Identification? MultiplicityBounds ';'
OwnedMultiplicity
         ::= OwnedMultiplicityRange
OwnedMultiplicityRange
         ::= MultiplicityBounds
MultiplicityBounds
         ::= '[' MultiplicityExpressionMember ( '..' MultiplicityExpressionMember )? ']'
MultiplicityExpressionMember
         ::= LiteralExpression
           | FeatureReferenceExpression
DataType ::= 'abstract'? 'datatype' ClassifierDeclaration TypeBody
Class    ::= 'abstract'? 'class' ClassifierDeclaration TypeBody
Structure
         ::= 'abstract'? 'struct' ClassifierDeclaration TypeBody
Association
         ::= 'abstract'? 'assoc' ClassifierDeclaration TypeBody
AssociationStructure
         ::= 'abstract'? 'assoc' 'struct' ClassifierDeclaration TypeBody
Connector
         ::= FeaturePrefix 'connector' ConnectorDeclaration TypeBody
ConnectorDeclaration
         ::= BinaryConnectorDeclaration
           | NaryConnectorDeclaration
BinaryConnectorDeclaration
         ::= ( FeatureDeclaration? 'from' | 'all' 'from'? )? ConnectorEndMember 'to' ConnectorEndMember
NaryConnectorDeclaration
         ::= FeatureDeclaration? ( '(' ConnectorEndMember ( ',' ConnectorEndMember )+ ')' )?
ConnectorEndMember
         ::= ( Name ':>' )? ConnectorEnd
ConnectorEnd
         ::= OwnedSubsetting OwnedMultiplicity?
BindingConnector
         ::= FeaturePrefix 'binding' BindingConnectorDeclaration TypeBody
BindingConnectorDeclaration
         ::= ( FeatureDeclaration? 'of' | 'all' 'of'? )? ConnectorEndMember '=' ConnectorEndMember
Succession
         ::= FeaturePrefix 'succession' SuccessionDeclaration TypeBody
SuccessionDeclaration
         ::= ( FeatureDeclaration? 'first' | 'all' 'first'? )? ConnectorEndMember 'then' ConnectorEndMember
Behavior ::= 'abstract'? 'behavior' BehaviorDeclaration TypeBody
BehaviorDeclaration
         ::= ClassifierDeclaration ParameterList?
ParameterList
         ::= '(' ( ParameterMember ( ',' ParameterMember )* )? ')'
ParameterMember
         ::= Parameter
Parameter
         ::= FeatureDirection? ( 'feature' | 'step' | 'expr' | 'bool' )? ParameterDeclaration
ParameterDeclaration
         ::= 'all'? ( Identification ParameterSpecializationPart? | ParameterSpecializationPart )
ParameterSpecializationPart
         ::= ( ParameterSpecialization+ MultiplicityPart? | MultiplicityPart ) ParameterSpecialization*
ParameterSpecialization
         ::= TypedBy
           | Subsets
           | Redefines
Step     ::= FeaturePrefix 'step' StepDeclaration TypeBody
StepDeclaration
         ::= FeatureDeclaration? ( ValuePart | StepParameterList )?
StepParameterList
         ::= '(' ( StepParameterMember ( ',' StepParameterMember )* )? ')'
StepParameterMember
         ::= StepParameter
StepParameter
         ::= Parameter ValuePart?
Function ::= 'abstract'? 'function' FunctionDeclaration FunctionBody
FunctionDeclaration
         ::= ClassifierDeclaration ParameterPart
ParameterPart
         ::= ParameterList ( ReturnParameterPart | EmptyReturnParameterPart )
           | EmptyReturnParameterPart
ReturnParameterPart
         ::= ReturnParameterMember
ReturnParameterMember
         ::= Parameter
EmptyReturnParameterPart
         ::= EmptyReturnParameterMember
EmptyReturnParameterMember
         ::= EmptyParameter
EmptyParameter
         ::=
FunctionBody
         ::= ';'
           | '{' ( OwnedDocumentation | NonFeatureMember | FeatureMember | AliasMember | Import )* ResultExpressionMember? '}'
ResultExpressionMember
         ::= MemberPrefix OwnedExpression
Expression
         ::= FeaturePrefix 'expr' ExpressionDeclaration FunctionBody
ExpressionDeclaration
         ::= FeatureDeclaration? ( ValuePart | StepParameterList ( ReturnParameterPart | EmptyReturnParameterPart ) )?
Predicate
         ::= 'abstract'? 'predicate' PredicateDeclaration FunctionBody
PredicateDeclaration
         ::= ClassifierDeclaration ParameterPart
BooleanExpression
         ::= FeaturePrefix 'bool' ExpressionDeclaration FunctionBody
Invariant
         ::= FeaturePrefix 'inv' ( 'true' | 'false' )? ExpressionDeclaration FunctionBody
Interaction
         ::= 'abstract'? 'interaction' BehaviorDeclaration TypeBody
ItemFlow ::= FeaturePrefix 'flow' ItemFlowDeclaration TypeBody
SuccessionItemFlow
         ::= FeaturePrefix 'succession' 'flow' ItemFlowDeclaration TypeBody
ItemFlowDeclaration
         ::= ( FeatureDeclaration? ( 'of' ItemFeatureMember | EmptyItemFeatureMember ) 'from' | 'all'? EmptyItemFeatureMember ) ItemFlowEndMember 'to' ItemFlowEndMember
ItemFeatureMember
         ::= ( Name ':' )? ItemFeature
ItemFeature
         ::= OwnedFeatureTyping OwnedMultiplicity?
           | OwnedMultiplicity OwnedFeatureTyping?
EmptyItemFeatureMember
         ::= EmptyItemFeature
EmptyItemFeature
         ::=
ItemFlowEndMember
         ::= ItemFlowEnd
ItemFlowEnd
         ::= ItemFlowEndSubsetting? ItemFlowFeatureMember
ItemFlowEndSubsetting
         ::= QualifiedName '.'
           | FeatureChainPrefix
FeatureChainPrefix
         ::= OwnedFeatureChaining '.' ( OwnedFeatureChaining '.' )+
ItemFlowFeatureMember
         ::= ItemFlowFeature
ItemFlowFeature
         ::= ItemFlowRedefinition
ItemFlowRedefinition
         ::= QualifiedName
ExpressionBody
         ::= FunctionBody

<?TOKENS?>

