(:~ /* converted on Tue Feb 1, 2022, 09:32 (UTC-08) by xtext-to-w3c v0.57 which is Copyright (c) 2011-2022 by Gunther Rademacher <grd@gmx.net> */ ~:)

OwnedExpressionMember
         ::= OwnedExpression
OwnedExpression
         ::= ( NullCoalescingExpression '?' OwnedExpression ':' | 'if' NullCoalescingExpression '?' OwnedExpression 'else' )* NullCoalescingExpression
NullCoalescingExpression
         ::= ImpliesExpression ( '??' ImpliesExpression )*
ImpliesExpression
         ::= OrExpression ( ImpliesOperator OrExpression )*
ImpliesOperator
         ::= '=>'
           | 'implies'
OrExpression
         ::= XorExpression ( OrOperator XorExpression )*
OrOperator
         ::= '|'
           | '||'
           | 'or'
XorExpression
         ::= AndExpression ( XorOperator AndExpression )*
XorOperator
         ::= '^^'
           | 'xor'
AndExpression
         ::= EqualityExpression ( AndOperator EqualityExpression )*
AndOperator
         ::= '&'
           | '&&'
           | 'and'
EqualityExpression
         ::= ClassificationExpression ( EqualityOperator ClassificationExpression )*
EqualityOperator
         ::= '=='
           | '!='
ClassificationExpression
         ::= RelationalExpression ( ClassificationOperator TypeReferenceMember )?
           | SelfReferenceExpression ClassificationOperator TypeReferenceMember
ClassificationOperator
         ::= 'hastype'
           | 'istype'
           | '@'
           | 'as'
TypeReferenceMember
         ::= TypeReference
TypeReference
         ::= ReferenceTyping
ReferenceTyping
         ::= QualifiedName
SelfReferenceExpression
         ::= SelfReferenceMember
SelfReferenceMember
         ::= EmptyFeature
EmptyFeature
         ::=
RelationalExpression
         ::= RangeExpression ( RelationalOperator RangeExpression )*
RelationalOperator
         ::= '<'
           | '>'
           | '<='
           | '>='
RangeExpression
         ::= AdditiveExpression ( '..' AdditiveExpression )?
AdditiveExpression
         ::= MultiplicativeExpression ( AdditiveOperator MultiplicativeExpression )*
AdditiveOperator
         ::= '+'
           | '-'
MultiplicativeExpression
         ::= ExponentiationExpression ( MultiplicativeOperator ExponentiationExpression )*
MultiplicativeOperator
         ::= '*'
           | '/'
           | '%'
ExponentiationExpression
         ::= UnaryExpression ( ExponentiationOperator UnaryExpression )*
ExponentiationOperator
         ::= '**'
           | '^'
UnaryExpression
         ::= UnaryOperator? ExtentExpression
UnaryOperator
         ::= '+'
           | '-'
           | '!'
           | '~'
           | 'not'
ExtentExpression
         ::= 'all' TypeReferenceMember
           | PrimaryExpression
PrimaryExpression
         ::= BaseExpression ( '.' FeatureChainExpression )? ( ( '[' SequenceExpression ']' | '->' ReferenceTyping ( ExpressionBodyMember | FunctionReferenceMember | ArgumentList ) | '.' ExpressionBodyMember ) ( '.' FeatureChainExpression )? )*
ExpressionBodyMember
         ::= ExpressionBody
FunctionReferenceMember
         ::= FunctionReference
FunctionReference
         ::= ReferenceTyping
FeatureChainExpression
         ::= FeatureChainMember
FeatureChainMember
         ::= QualifiedName
           | FeatureChain
BaseExpression
         ::= NullExpression
           | LiteralExpression
           | FeatureReferenceExpression
           | InvocationExpression
           | ExpressionBody
           | '(' SequenceExpression ')'
ExpressionBody
         ::= '{' ( BodyParameterMember ';' )* ResultExpressionMember '}'
ResultExpressionMember
         ::= OwnedExpression
BodyParameterMember
         ::= 'in' Name BodyParameter
BodyParameter
         ::=
SequenceExpression
         ::= OwnedExpression ( ',' OwnedExpression )* ','?
FeatureReferenceExpression
         ::= FeatureReferenceMember
FeatureReferenceMember
         ::= QualifiedName
InvocationExpression
         ::= OwnedFeatureTyping ArgumentList
OwnedFeatureTyping
         ::= QualifiedName
           | FeatureChain
FeatureChain
         ::= OwnedFeatureChaining ( '.' OwnedFeatureChaining )+
OwnedFeatureChaining
         ::= QualifiedName
ArgumentList
         ::= '(' ( PositionalArgumentList | NamedArgumentList )? ')'
PositionalArgumentList
         ::= OwnedExpressionMember ( ',' OwnedExpressionMember )*
NamedArgumentList
         ::= NamedExpressionMember ( ',' NamedExpressionMember )*
NamedExpressionMember
         ::= Name '=' OwnedExpression
NullExpression
         ::= 'null'
           | '(' ')'
LiteralExpression
         ::= LiteralBoolean
           | LiteralString
           | LiteralInteger
           | LiteralReal
           | '*'
LiteralBoolean
         ::= BooleanValue
BooleanValue
         ::= 'true'
           | 'false'
LiteralString
         ::= STRING_VALUE
LiteralInteger
         ::= DECIMAL_VALUE
LiteralReal
         ::= RealValue
RealValue
         ::= DECIMAL_VALUE? '.' ( DECIMAL_VALUE | EXP_VALUE )
           | EXP_VALUE
Name     ::= ID
           | UNRESTRICTED_NAME
Qualification
         ::= ( Name '::' )+
QualifiedName
         ::= Qualification? Name

<?TOKENS?>

DECIMAL_VALUE
         ::= [0-9]+
EXP_VALUE
         ::= DECIMAL_VALUE [eE] [+#x2D]? DECIMAL_VALUE
ID       ::= [a-zA-Z_] [a-zA-Z_0-9]*
UNRESTRICTED_NAME
         ::= "'" ( '\' [btnfr"'\] | [^\'] )* "'"
STRING_VALUE
         ::= '"' ( '\' [btnfr"'\] | [^\"] )* '"'
REGULAR_COMMENT
         ::= '/*' [^*] ( .* - ( .* '*/' .* ) ) '*/'
DOCUMENTATION_COMMENT
         ::= '/**' ( .* - ( .* '*/' .* ) ) '*/'
ML_NOTE  ::= '//*' ( .* - ( .* '*/' .* ) ) '*/'
SL_NOTE  ::= '//' [^#xA#xD]* ( #xD? #xA )?
WS       ::= [ #x9#xD#xA]+