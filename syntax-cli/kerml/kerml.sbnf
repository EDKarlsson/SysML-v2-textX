// --------------------------------------------------------
// Module Include
%{
// Code include "as is"

function Literal(namePrefix, value) {
    return {
        type: `${namePrefix}Literal`,
        value,
    };
}

//--------------------------------------------------------
%}

/**
 * The `THEN` precedence is lower, than of `ELSE`, so
 * no shift-reduce conflict, and no "dangling-else" problem
 */
%nonassoc PackageDeclarationList
%nonassoc PackageDeclaration

%%
// --------------------------------------------------------
// Syntactic grammar


// --------------------------------------------------------

Model
    : StatementList
    {
        $$ = {
            type: 'Model',
            body: $1,
        }
    }
    ;

StatementList
    : Statement
      { $$ = [$1] }
    | StatementList Statement
      { $1.push($2); $$ = $1 }
    ;

Statement
    : PackageDeclaration 
    | BlockStatement
    ;

MembershipDeclaration
    : MembershipList
    ;

PackageDeclarationList
    : PackageDeclarationList %prec PackageDeclaration
    { $$ = [$1]}
    | PackageDeclarationList PackageDeclaration
    {$1.push($2); $$ = $1}
    ;

PackageDeclaration
    : PACKAGE Identifier BlockStatement
    { $$ = {
            type: 'PackageDeclaration',
            name: $2,
            body: $3,
        }
    }
    ;

BlockStatement
    : '{' MembershipList '}'
      {
          $$ = {
              type:'BlockStatement',
              body:$2,
          }
      }
    ;

MembershipList
    : PackageDeclarationList
    | StructDeclarationList
    ;

StructDeclarationList
    : StructDeclaration
    { $$ = [$1]}
    | StructDeclarationList StructDeclaration
    {$1.push($2); $$ = $1}
    ;

StructDeclaration
    : STRUCT Identifier OptSpecialization ';'
    {
        $$ = {
            type: 'StructDeclaration',
            name: $Identifier,
            specialization: $OptSpecialization,
        }
    }
    ;

OptSpecialization
    : Specialization
    | /* empty */
      {$$ = null }
    ;

Specialization
    : SPECIALIZATION Identifier
      { $$ = {
          type:'SpecializationDeclaration',
          super: $2,
      }}
    ;

Identifier
    : IDENTIFIER
    { $$ = {
            type: 'Identifier',
            value: $1
        }
    }
    ;

//------------------------------------------------------------

Multiplicity
    : MULTIPLICITY Identifier '[' NumericLiteral '..' NumericLiteral ']'
    {
        $$ = {
            type:'Multiplicity',
            name: $Identifier,
            lower: $4,
            upper: $5,
        }
    }
    ;

Literal
    : NumericLiteral
    | StringLiteral
    | TrueLiteral
    | FalseLiteral
    | NullLiteral
    ;

TrueLiteral
    : TRUE { $$ = Literal('Boolean', true)}
    ;
FalseLiteral
    : FALSE { $$ = Literal('Boolean', false)}
    ;
NullLiteral
    : NULL { $$ = Literal('Null', null)}
    ;
NumericLiteral
    : NUMBER { $$ = Literal('Numeric', Number($1))}
    ;
StringLiteral
    : STRING { $$ = Literal('String', $1.slice(1,-1))}
    ;